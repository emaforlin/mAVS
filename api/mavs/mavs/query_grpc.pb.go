// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mavs/mavs/query.proto

package mavs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName          = "/mavs.mavs.Query/Params"
	Query_SystemInfo_FullMethodName      = "/mavs.mavs.Query/SystemInfo"
	Query_StoredVoting_FullMethodName    = "/mavs.mavs.Query/StoredVoting"
	Query_StoredVotingAll_FullMethodName = "/mavs.mavs.Query/StoredVotingAll"
	Query_ShowVoter_FullMethodName       = "/mavs.mavs.Query/ShowVoter"
	Query_ListVoters_FullMethodName      = "/mavs.mavs.Query/ListVoters"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a SystemInfo by index.
	SystemInfo(ctx context.Context, in *QueryGetSystemInfoRequest, opts ...grpc.CallOption) (*QueryGetSystemInfoResponse, error)
	// Queries a list of StoredVoting items.
	StoredVoting(ctx context.Context, in *QueryGetStoredVotingRequest, opts ...grpc.CallOption) (*QueryGetStoredVotingResponse, error)
	StoredVotingAll(ctx context.Context, in *QueryAllStoredVotingRequest, opts ...grpc.CallOption) (*QueryAllStoredVotingResponse, error)
	// Queries a list of ShowVoter items.
	ShowVoter(ctx context.Context, in *QueryShowVoterRequest, opts ...grpc.CallOption) (*QueryShowVoterResponse, error)
	// Queries a list of ListVoters items.
	ListVoters(ctx context.Context, in *QueryListVotersRequest, opts ...grpc.CallOption) (*QueryListVotersResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemInfo(ctx context.Context, in *QueryGetSystemInfoRequest, opts ...grpc.CallOption) (*QueryGetSystemInfoResponse, error) {
	out := new(QueryGetSystemInfoResponse)
	err := c.cc.Invoke(ctx, Query_SystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredVoting(ctx context.Context, in *QueryGetStoredVotingRequest, opts ...grpc.CallOption) (*QueryGetStoredVotingResponse, error) {
	out := new(QueryGetStoredVotingResponse)
	err := c.cc.Invoke(ctx, Query_StoredVoting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredVotingAll(ctx context.Context, in *QueryAllStoredVotingRequest, opts ...grpc.CallOption) (*QueryAllStoredVotingResponse, error) {
	out := new(QueryAllStoredVotingResponse)
	err := c.cc.Invoke(ctx, Query_StoredVotingAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowVoter(ctx context.Context, in *QueryShowVoterRequest, opts ...grpc.CallOption) (*QueryShowVoterResponse, error) {
	out := new(QueryShowVoterResponse)
	err := c.cc.Invoke(ctx, Query_ShowVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListVoters(ctx context.Context, in *QueryListVotersRequest, opts ...grpc.CallOption) (*QueryListVotersResponse, error) {
	out := new(QueryListVotersResponse)
	err := c.cc.Invoke(ctx, Query_ListVoters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a SystemInfo by index.
	SystemInfo(context.Context, *QueryGetSystemInfoRequest) (*QueryGetSystemInfoResponse, error)
	// Queries a list of StoredVoting items.
	StoredVoting(context.Context, *QueryGetStoredVotingRequest) (*QueryGetStoredVotingResponse, error)
	StoredVotingAll(context.Context, *QueryAllStoredVotingRequest) (*QueryAllStoredVotingResponse, error)
	// Queries a list of ShowVoter items.
	ShowVoter(context.Context, *QueryShowVoterRequest) (*QueryShowVoterResponse, error)
	// Queries a list of ListVoters items.
	ListVoters(context.Context, *QueryListVotersRequest) (*QueryListVotersResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) SystemInfo(context.Context, *QueryGetSystemInfoRequest) (*QueryGetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (UnimplementedQueryServer) StoredVoting(context.Context, *QueryGetStoredVotingRequest) (*QueryGetStoredVotingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredVoting not implemented")
}
func (UnimplementedQueryServer) StoredVotingAll(context.Context, *QueryAllStoredVotingRequest) (*QueryAllStoredVotingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredVotingAll not implemented")
}
func (UnimplementedQueryServer) ShowVoter(context.Context, *QueryShowVoterRequest) (*QueryShowVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVoter not implemented")
}
func (UnimplementedQueryServer) ListVoters(context.Context, *QueryListVotersRequest) (*QueryListVotersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVoters not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemInfo(ctx, req.(*QueryGetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredVoting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredVotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredVoting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StoredVoting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredVoting(ctx, req.(*QueryGetStoredVotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredVotingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredVotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredVotingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StoredVotingAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredVotingAll(ctx, req.(*QueryAllStoredVotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowVoter(ctx, req.(*QueryShowVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListVoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListVoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListVoters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListVoters(ctx, req.(*QueryListVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavs.mavs.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SystemInfo",
			Handler:    _Query_SystemInfo_Handler,
		},
		{
			MethodName: "StoredVoting",
			Handler:    _Query_StoredVoting_Handler,
		},
		{
			MethodName: "StoredVotingAll",
			Handler:    _Query_StoredVotingAll_Handler,
		},
		{
			MethodName: "ShowVoter",
			Handler:    _Query_ShowVoter_Handler,
		},
		{
			MethodName: "ListVoters",
			Handler:    _Query_ListVoters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mavs/mavs/query.proto",
}
