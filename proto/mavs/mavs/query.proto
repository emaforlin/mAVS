syntax = "proto3";

package mavs.mavs;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "mavs/mavs/params.proto";
import "mavs/mavs/system_info.proto";
import "mavs/mavs/stored_voting.proto";
import "mavs/mavs/voter.proto";

option go_package = "github.com/emaforlin/mAVS/x/mavs/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/emaforlin/mAVS/mavs/params";
  
  }
  
  // Queries a SystemInfo by index.
  rpc SystemInfo (QueryGetSystemInfoRequest) returns (QueryGetSystemInfoResponse) {
    option (google.api.http).get = "/emaforlin/mAVS/mavs/system_info";
  
  }
  
  // Queries a list of StoredVoting items.
  rpc StoredVoting    (QueryGetStoredVotingRequest) returns (QueryGetStoredVotingResponse) {
    option (google.api.http).get = "/emaforlin/mAVS/mavs/stored_voting/{index}";
  
  }
  rpc StoredVotingAll (QueryAllStoredVotingRequest) returns (QueryAllStoredVotingResponse) {
    option (google.api.http).get = "/emaforlin/mAVS/mavs/stored_voting";
  
  }
  
  // Queries a list of ShowVoter items.
  rpc ShowVoter (QueryShowVoterRequest) returns (QueryShowVoterResponse) {
    option (google.api.http).get = "/emaforlin/mAVS/mavs/show_voter/{dni}/{votingId}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetSystemInfoRequest {}

message QueryGetSystemInfoResponse {
  SystemInfo SystemInfo = 1 [(gogoproto.nullable) = false];
}

message QueryGetStoredVotingRequest {
  string index = 1;
}

message QueryGetStoredVotingResponse {
  StoredVoting storedVoting = 1 [(gogoproto.nullable) = false];
}

message QueryAllStoredVotingRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoredVotingResponse {
  repeated StoredVoting                           storedVoting = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination   = 2;
}

message QueryShowVoterRequest {
  string dni      = 1;
  string votingId = 2;
}

message QueryShowVoterResponse {
  Voter voter = 1;
}

