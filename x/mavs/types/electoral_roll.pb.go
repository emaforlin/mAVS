// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mavs/mavs/electoral_roll.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ElectoralRoll struct {
	Voters map[uint64]*Voter `protobuf:"bytes,1,rep,name=voters,proto3" json:"voters,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ElectoralRoll) Reset()         { *m = ElectoralRoll{} }
func (m *ElectoralRoll) String() string { return proto.CompactTextString(m) }
func (*ElectoralRoll) ProtoMessage()    {}
func (*ElectoralRoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4265f59b684714, []int{0}
}
func (m *ElectoralRoll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElectoralRoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ElectoralRoll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ElectoralRoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElectoralRoll.Merge(m, src)
}
func (m *ElectoralRoll) XXX_Size() int {
	return m.Size()
}
func (m *ElectoralRoll) XXX_DiscardUnknown() {
	xxx_messageInfo_ElectoralRoll.DiscardUnknown(m)
}

var xxx_messageInfo_ElectoralRoll proto.InternalMessageInfo

func (m *ElectoralRoll) GetVoters() map[uint64]*Voter {
	if m != nil {
		return m.Voters
	}
	return nil
}

func init() {
	proto.RegisterType((*ElectoralRoll)(nil), "mavs.mavs.ElectoralRoll")
	proto.RegisterMapType((map[uint64]*Voter)(nil), "mavs.mavs.ElectoralRoll.VotersEntry")
}

func init() { proto.RegisterFile("mavs/mavs/electoral_roll.proto", fileDescriptor_cb4265f59b684714) }

var fileDescriptor_cb4265f59b684714 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0x4d, 0x2c, 0x2b,
	0xd6, 0x07, 0x13, 0xa9, 0x39, 0xa9, 0xc9, 0x25, 0xf9, 0x45, 0x89, 0x39, 0xf1, 0x45, 0xf9, 0x39,
	0x39, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x9c, 0x20, 0x29, 0x3d, 0x10, 0x21, 0x25, 0x8a,
	0x50, 0x5a, 0x96, 0x5f, 0x92, 0x5a, 0x04, 0x51, 0xa1, 0x34, 0x8b, 0x91, 0x8b, 0xd7, 0x15, 0xa6,
	0x35, 0x28, 0x3f, 0x27, 0x47, 0xc8, 0x86, 0x8b, 0x0d, 0xac, 0xa0, 0x58, 0x82, 0x51, 0x81, 0x59,
	0x83, 0xdb, 0x48, 0x45, 0x0f, 0x6e, 0x88, 0x1e, 0x8a, 0x4a, 0xbd, 0x30, 0xb0, 0x32, 0xd7, 0xbc,
	0x92, 0xa2, 0xca, 0x20, 0xa8, 0x1e, 0x29, 0x6f, 0x2e, 0x6e, 0x24, 0x61, 0x21, 0x01, 0x2e, 0xe6,
	0xec, 0xd4, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x10, 0x53, 0x48, 0x8d, 0x8b, 0xb5,
	0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x00, 0xc9, 0x74, 0xb0,
	0xc6, 0x20, 0x88, 0xb4, 0x15, 0x93, 0x05, 0xa3, 0x93, 0xc3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37,
	0x1e, 0xcb, 0x31, 0x44, 0xa9, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea,
	0xa7, 0xe6, 0x26, 0xa6, 0xe5, 0x17, 0xe5, 0x64, 0xe6, 0xe9, 0xe7, 0x3a, 0x86, 0x05, 0xeb, 0x57,
	0x40, 0x3c, 0x59, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6, 0xa5, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0x62, 0x2d, 0x72, 0x29, 0x01, 0x00, 0x00,
}

func (m *ElectoralRoll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElectoralRoll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElectoralRoll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voters) > 0 {
		for k := range m.Voters {
			v := m.Voters[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintElectoralRoll(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintElectoralRoll(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintElectoralRoll(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintElectoralRoll(dAtA []byte, offset int, v uint64) int {
	offset -= sovElectoralRoll(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ElectoralRoll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Voters) > 0 {
		for k, v := range m.Voters {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovElectoralRoll(uint64(l))
			}
			mapEntrySize := 1 + sovElectoralRoll(uint64(k)) + l
			n += mapEntrySize + 1 + sovElectoralRoll(uint64(mapEntrySize))
		}
	}
	return n
}

func sovElectoralRoll(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozElectoralRoll(x uint64) (n int) {
	return sovElectoralRoll(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ElectoralRoll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElectoralRoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElectoralRoll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElectoralRoll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectoralRoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElectoralRoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthElectoralRoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voters == nil {
				m.Voters = make(map[uint64]*Voter)
			}
			var mapkey uint64
			var mapvalue *Voter
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowElectoralRoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElectoralRoll
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElectoralRoll
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthElectoralRoll
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthElectoralRoll
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Voter{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipElectoralRoll(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthElectoralRoll
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Voters[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElectoralRoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElectoralRoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipElectoralRoll(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowElectoralRoll
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElectoralRoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElectoralRoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthElectoralRoll
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupElectoralRoll
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthElectoralRoll
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthElectoralRoll        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowElectoralRoll          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupElectoralRoll = fmt.Errorf("proto: unexpected end of group")
)
